#!/bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file build_m5g
# brief  Mosaic5G.io automated build and install tool 
# author  Navid Nikaein

export DEBIAN_FRONTEND=noninteractive


###################################
# colorful echos
###################################

black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}


################################
# Set the vars 
################################
SUDO='sudo -E'
ORIGIN_PATH=$PWD
m5g_path=$(dirname $(readlink -f $0))

rtc_path=$m5g_path/flexran
rtc_exec=$rtc_path/build
rtc_exec_name=rt_controller
rtc_branch=develop-uplink

agent_r_path=$m5g_path/agent-r
agent_r_exec=$agent_r_path/build
agent_r_exec_name=lte-softmodem
agent_r_branch=develop

agent_c_path=$m5g_path/agent-c
agent_c_exec=$agent_c_path/build
agent_c_exec_name=''
agent_c_branch=openair-cn-llmec

jox_path=$m5g_path/jox
jox_exec=$jox_path/scripts
jox_exec_name=jox
jox_branch=develop


llmec_path=$m5g_path/ll-mec
llmec_branch=develop

store_path=$m5g_path/store
store_branch=develop

echo_info "Mosaic5G Path:           $m5g_path"
echo_info "FlexRAN Path:            $rtc_path"
echo_info "LL-MEC Path:             $llmec_path"
echo_info "Jox Path:                $jox_path"
echo_info "Store Path:              $store_path"
echo_info "OAI agent_r Path:        $agent_r_path"
echo_info "OAI agent_c Path:        $agent_c_path"


os=$(grep "^ID=" /etc/os-release | sed "s/ID=//" | sed "s/\"//g")
os_release=$(grep "^VERSION_ID=" /etc/os-release | sed "s/VERSION_ID=//" | sed "s/\"//g")
os_dist=$os$os_release
echo_info "Detected OS Dist:        $os_dist"

case "$os" in
  fedora) os_base="fedora"; os_pm="dnf"; os_cmake="cmake" ;;
  rhel)   os_base="fedora"; os_pm="yum"; os_cmake="cmake3" ;;
  centos) os_base="fedora"; os_pm="yum"; os_cmake="cmake3" ;;
  debian) os_base="debian"; os_pm="apt-get"; os_cmake="cmake" ;;
  ubuntu) os_base="debian"; os_pm="apt-get"; os_cmake="cmake" ;;
esac

check_supported_os_dist() {
    case "$os_dist" in
        "ubuntu17.10") return 0 ;;
        "ubuntu17.04") return 0 ;;
        "ubuntu16.04") return 0 ;;
        "ubuntu14.04") return 0 ;;
        "fedora24")    return 0 ;;
        "rhel7")       return 0 ;;
        "centos7")     return 0 ;;
    esac
    return 1
}
pb_version=3

################################
# Function to killall the subprocesses when Ctrl-C Key is hit
###############################

function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
while true
do
    FORLOOP=FALSE
    # Get all the child process id
    for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
    do
        if [ $i -ne $CURPID ] ; then
            procid[$arraycounter]=$i
            arraycounter=`expr $arraycounter + 1`
            ppid=$i
            FORLOOP=TRUE
        fi
    done
    if [ "$FORLOOP" = "FALSE" ] ; then
        arraycounter=`expr $arraycounter - 1`
        ## We want to kill child process id first and then parent id's
        while [ $arraycounter -ne 0 ]
        do  
            echo "first we send ctrl-c to program"
            $SUDO kill -INT "${procid[$arraycounter]}"
            sleep 3
            echo "Now we force kill if that didn't work"
            $SUDO kill -9 "${procid[$arraycounter]}" >/dev/null
            arraycounter=`expr $arraycounter - 1`
        done
        exit
    fi
done
}

############################
# install additonal tools 
##########################

install_required_packages(){

    if ! check_supported_os_dist; then
        echo_error "Your distribution $os_dist is not supported by Mosaic5G !"
        exit 1
    fi
    
    $SUDO $os_pm  update -y
    $SUDO $os_pm install -y \
	  virt-what 
          snapcraft \
	  build-essential \ 
	  python-dev  \
	  python-pexpect \
	  python-pip  \
	  python-yaml \
	  libyaml-dev

	  install_app_dev_package
}

install_app_dev_package(){
    
    $SUDO pip install ipcalc
    $SUDO pip install matplotlib
    $SUDO pip install pyyaml
    $SUDO pip install tornado
    $SUDO pip install enum
    $SUDO pip install requests
    
}

install_optional_packages (){
    $SUDO $os_pm get update
    $SUDO $os_pm install -y \
	  check \
	  dialog \
	  gawk \
	  sshfs \
	  swig  \
	  tshark \
	  exuberant-ctags \
	  ntpdate \
	  tree \
	  htop \
	  python  \
	  vim \
	  emacs \
	  wireshark \
	  ccze \
	  iperf \
	  iperf3 \
	  mscgen \
	  gdb \
	  git \
	  ethtool \
	  meld \
	  hping3 \
	  jq  \
	  wget \
	  libyaml-dev \
	  iperf \ 
          iproute \
	  iptables 
	         
}



#######################################
# install and build mosaic5G.io platforms 
#######################################
build_rtc(){

    git submodule update flexran
    cd $rtc_path
    git checkout $rtc_branch
    echo_info "Cloned FlexRAN controller $rtc_branch branch"
    
    if [ "$kernel" == "generic" ]; then 
	build_args="$build_args -r"
    fi
   
    if [ -z $pb_version ] ; then
        build_args="$build_args -p $pb_version"
    fi

    if [ -z $bind_port ] ; then 
	exec_args="-p $bind_port"	
    fi 

    if [ -z $rest_port ] ; then
        exec_args="$exec_args -n $rest_port"
    fi
        
    export FLEXRAN_RTC_HOME=$rtc_path
    export FLEXRAN_RTC_EXEC=$rtc_exec
   
    echo_info "./tools/install_dependencies $pb_version" 
    echo_info "./build_flexran.sh $build_args"
    cd -
    echo_info "build FlexRAN RTC done "
}
build_agent_r(){

    git submodule update agent-r 
    cd $agent_r_path
    git checkout $agent_r_branch
    cd -
    echo_info "Cloned FlexRAN Agent $agent_r_branch branch"
}

build_agent_c(){

    git submodule update agent-c
    cd $agent_c_path
    git checkout $agent_c_branch
    cd -
    echo_info "Cloned ll-mec agent $agent_c_branch branch"
}

build_llmec(){

    git submodule update ll-mec
    cd $llmec_path
    git checkout $llmec_branch
    cd - 
    echo_info "Cloned lowlatency MEC $llmec_branch branch"
}

build_store(){

    git submodule update store 
    cd $store_path
    git checkout $store_branch
    cd -
    echo_info "Cloned the store $store_branch branch"
}
build_jox(){

    git submodule update jox
    cd $jox_path
    git checkout $jox_branch
    source ./joxenv
    echo_info "./scripts/build_jox"
    cd -
    echo_info "Cloned JoX $jox_branch branch"
}

build_m5g (){
 
    build_rtc
    build_llmec
    build_store
    build_jox
    build_agent_r
    build_agent_c
}

snap_rtc(){
    echo ''
}

snap_agent_r(){
    echo ''
}
snap_agent_c(){
    echo ''
}
snap_llmec(){
    echo ''
}

    
snap_m5g (){
 
    snap_rtc
    snap_agent_r
    snap_agent_c
    snap_llmec
}

init_snap_m5g(){
    echo ''
    
}

init_build_m5g(){

    if [ ! -f  ./submodule_init ]; then
	git submodule init
	echo "yes"  > ./submodule_init
    fi 
}

############################
# Clean all
###########################

clean_all(){
    echo_info "cleaning "
}

############################
# manage options and helps
###########################
function print_help() {
  echo_info '
This program installs the Mosaic5G.io software platforms from snaps
or build a custom platform from the source file. 
You should have ubuntu 16.xx. Root password required.
Options
-h
   print this help
--clean-snaps
   Clean all the snaps"
--clean-all
   Clean all files to make a rebuild from start"
--install-kernel
   install the required kernel
-i | --install-required-pkg
   install required packages for build and/or snap process
-c | --build-agent-c
   Builds LL-MEC agent with OpenAirInterface from source
-C | --snap-agent-c
   install LL-MEC agent with OpenAirInterface from snap
-m | --build-m5g
   Builds all the Mosaic5G.io software plarforms from source 
-M | --snap-m5g
   Install all of the Mosaic5G.io platforms form snap
-j | --build-jox
   Builds JOX Orchestrator
-l | --build-llmec
   Builds lowlatency MEC platform from source
-L | --snap-llmec
   Install lowlatency MEC platform from snap
-f | --build-flexran
   Build FlexRAN realtime controller from source 
-F | --snap-flexran
   Install FlexRAN realtime controller from snap 
-r | --build-agent-r
   Builds FlexRAN agent with OpenAirInterface from source
-R | --snap-agent-r
   install FlexRAN agent with OpenAirInterface from snap
-s | --build-store
   Builds ans setup the store 
-p | --pb-version
   Set the protobuf version for FlexRAN RTC. Valid options 2 and 3.
-o | --install-optional-packages
   Install useful but not mandatory packages such as vim, valgrind
Usage:
- build_m5g -i -m : insatll all the sanps and run 
- build_m5g -i -j
'
}


function main() {
    until [ -z "$1" ]; do
	
	case "$1" in
	    --clean-snaps)
		CLEAN_SNAPS=1
		shift;;
	    -k | --install-kernel)
		INSTALL_KERNEL=1
		echo_info "Will install the kernel"
		shift;;
	    -i | --install-required-pkg)
		INSTALL_PKG=1
		echo_info "Will install the required packages for build and snap process"
		shift;;
	    -m | --build-m5g)
		BUILD_M5G=1
		echo_info "Will build mosaic5G.io platforms from source"
		shift;;
	    -M | --snap-m5g)
		SNAP_M5G=1
		echo_info "Will install mosaic5G.io platforms from snap"
		shift;;
	    -j | --build-jox)
		BUILD_JOX=1
		echo_info "Will build the environment for JOX"
		shift;;
	    -l | --build-llmec)
		BUILD_LLMEC=1
		echo_info "Will build ll-mec from source"
		shift;;
	    -L | --snap-llmec)
		SNAP_LLMEC=1
		echo_info "Will install ll-mec from snap"
		shift;;
	    -f | --build-flexran)
		BUILD_RTC=1
		echo_info "Will build FlexRAN Realtime Controller (RTC) from source"
		shift;;
	    -F | --snap-flexran)
		SNAP_RTC=1
		echo_info "Will install FlexRAN Realtime Controller (RTC) from snap"
		shift;;
	    -r | --build-agent-r)
		BUILD_AGENT_R=1
		echo_info "Will build FlexRAN Agent with OpenAirInterface RAN from source"
		shift;;
	    -R | --snap-agent-r)
		SNAP_AGENT_R=1
		echo_info "Will install FlexRAN Agent with OpenAirInterface RAN from snap"
		shift;;
	    -s | --build-store)
		BUILD_STORE=1
		echo_info "Will build Mosaic5G store" 
		shift;;
	    -c | --build-agent-c)
		BUILD_AGENT_C=1
		echo_info "Will build LL-MEC Agent with OpenAirInterface CN from source"
		shift;;
	    -C | --snap-agent-c)
		SNAP_AGENT_C=1
		echo_info "Will install LL-MEC Agent with OpenAirInterface CN from snap"
		shift;;
	    -p | --protobuf-version)
		echo "setting protobuf version to $2" 
		pb_version=$2
		shift 2;;
	    -o | --install-optional-packages)
		INSTALL_OPTIONAL=1
		echo_info "Will install optional packages"
		shift;;
	    -h | --help)
		print_help
		exit 1;;
	    *)
		print_help
		if [ "$1" != "-h" -o "$1" != "--help" -o "$1" != "-help" ]; then 
		    echo_fatal "Unknown option $1"
		fi 
		break;;
	esac
    done
    
    if [ "$CLEAN_SNAPS" = "1" ] ; then
	clean_snaps
	echo_info "Remove all the previously installed snaps"
    fi
    
    if [ "$INSTALL_PKG" = "1" ] ; then
	install_required_packages
	echo_info "Install the required packages"
    fi
	
    
    if [ "$BUILD_M5G" = "1" ] ; then
	echo_info "Build Customized MOSAIC5G.io Sotware Platforms"
	init_build_m5g
	build_m5g
    else
	init_build_m5g
	if [ "$BUILD_RTC" = "1" ] ; then
	    echo_info "Building FlexRAN realtime controller"
            build_rtc
	fi
	if [ "$BUILD_AGENT_R" = "1" ] ; then
	    echo_info "Building FlexRAN Agent with OpenAirInterface RAN"
            build_agent_r
	fi
	if [ "$BUILD_AGENT_C" = "1" ] ; then
	    echo_info "Building LL-MEC Agent with OpenAirInterface RAN"
            build_agent_c
	fi
	if [ "$BUILD_LLMEC" = "1" ] ; then
	    echo_info "Building lowlatency MEC platforms"
            build_llmec
	fi
	if [ "$BUILD_JOX" = "1" ] ; then
	    echo_info "Building JOX orchestrator"
            build_jox
	fi
	if [ "$BUILD_STORE" = "1" ] ; then
	    echo_info "Building Store"
            build_store
	fi
    fi
    
    if [ "$SNAP_M5G" = "1" ] ; then
	echo_info "Snap MOSAIC5G.io Sotware Platforms"
	init_snap_m5g
	snap_m5g
    else
	init_snap_m5g
	if [ "$SNAP_RTC" = "1" ] ; then
	    echo_info "Snap FlexRAN realtime controller"
            snap_rtc
	fi
	if [ "$SNAP_AGENT_R" = "1" ] ; then
	    echo_info "Snap FlexRAN Agent with OpenAirInterface RAN"
            snap_agent_r
	fi
	if [ "$SNAP_AGENT_C" = "1" ] ; then
	    echo_info "Snap FlexCN Agent with OpenAirInterface CN"
            snap_agent_c
	fi
	if [ "$SNAP_LLMEC" = "1" ] ; then
	    echo_info "Snap lowlatency MEC platforms"
            snap_llmec
	fi
    fi
    
    if [ "$INSTALL_OPTIONAL" = "1" ] ; then
	echo_info "Installing optional packages"
	install_optional_packages
	echo_info "Installing optional packages: done"
    fi
    
}

main "$@"
